{"version":3,"sources":["../webpack/bootstrap","../node_modules/color-convert/conversions.js","../node_modules/color/index.js","../node_modules/color-string/index.js","../node_modules/color-string/node_modules/color-name/index.js","../node_modules/simple-swizzle/index.js","../node_modules/simple-swizzle/node_modules/is-arrayish/index.js","../node_modules/color-convert/index.js","../node_modules/color-name/index.js","../node_modules/color-convert/route.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","worker/QueryExecutor.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","worker/Palette.ts","worker/getPackageFromFilePath.ts","utils/formatByteSize.ts","utils/colors.ts","worker/buildGraphVisualization.ts","worker/getBundleSizeSummary.ts","../node_modules/webpack-bundle-diff-add-children/dist/index.es.js","worker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","cssKeywords","reverseKeywords","convert","rgb","channels","labels","hsl","hsv","hwb","cmyk","xyz","lab","lch","hex","keyword","ansi16","ansi256","hcg","apple","gray","model","Error","length","h","g","b","min","Math","max","delta","rdif","gdif","bdif","v","diff","diffc","k","reversed","currentClosestKeyword","x","y","currentClosestDistance","Infinity","distance","pow","z","t1","t2","t3","val","smin","lmin","hi","floor","f","q","sl","vmin","wh","bl","ratio","y2","x2","z2","a","atan2","PI","sqrt","hr","cos","sin","args","arguments","round","ansi","color","mult","rem","string","toString","toUpperCase","substring","match","colorString","split","map","_char","join","integer","parseInt","hue","chroma","mg","pure","w","_slice","slice","skippedModels","hashedModelKeys","keys","forEach","sort","limiters","Color","obj","this","valpha","result","newArr","zeroArray","splice","indexOf","alpha","hashedKeys","JSON","stringify","push","limit","freeze","getset","channel","modifier","Array","isArray","maxfn","arr","toJSON","places","self","to","concat","percentString","percent","array","unitArray","unitObject","num","Number","toFixed","roundTo","roundToPlace","red","green","blue","saturationl","lightness","saturationv","white","wblack","cyan","magenta","yellow","black","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","isDark","isLight","negate","lighten","darken","saturate","desaturate","whiten","blacken","grayscale","fade","opaquer","rotate","degrees","mix","mixinColor","weight","color1","undefined","w1","w2","newAlpha","raw","colorNames","swizzle","reverseNames","cs","clamp","hexDouble","str","toLowerCase","hexAlpha","i2","parseFloat","isNaN","rgba","hsla","hwba","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellowgreen","isArrayish","results","len","arg","wrap","fn","Function","getOwnPropertyDescriptor","constructor","conversions","route","fromModel","routes","toModel","wrappedFn","conversion","wrapRounded","wrapRaw","deriveBFS","graph","models","parent","buildGraph","queue","current","pop","adjacents","adjacent","node","unshift","link","from","wrapConversion","path","cur","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","descriptor","configurable","writable","_createClass","protoProps","staticProps","traverseGraph","startingNodes","getSucessors","visitedIds","Set","add","id","frontier","filter","has","applyQuery","bothGraphs","query","type","filterRegex","fileName","options","splitOnStar","RegExp","caseSensitive","fileNamePathToRegex","values","exec","innerIncludeQueryResults","dependants","parentNodeName","innerIncludedByQueryResults","dependencies","childNodeName","andLeftNames","left","andRightNames","right","setA","setB","_intersection","elem","intersection","orLeftNames","orRightNames","newNames","pullRequestGraph","_i","_Object$keys","baselineGraph","delete","Boolean","oldNames","_i2","_Object$keys2","console","log","nodeName","size","queryToInterpolateResults","innerQuery","originalNodeNames","unionOfAllParents","parentsToOriginalNode","Map","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","set","_iterator","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","startingNode","currentChildNode","childName","inParentSetsOf","descendant","_iterator2","notQueryInnerResultNames","QueryExecutor","bundleData","blob","toGraph","data","fromEntries","_slicedToArray","_arrayWithHoles","_arr","_n","_d","_e","_s","_iterableToArrayLimit","_nonIterableRest","Palette","palette","colorCounter","assignedColors","getPackageFromFilePath","filePath","formatByteSize","unitIndex","formatByteSizeChange","abs","BAD_COLOR","GOOD_COLOR","getDependencies","maybeNode","getNodeId","oldGraphNode","newGraphNode","union","_union","uniq","getBundleSizeSummary","resultGraph","packages","allNodeNames","ensurePackage","packageName","numFilesAfter","numFilesDelta","totalBytesAfter","totalBytesDelta","currentPackage","total","isSameBundle","child","children","namedChunkGroups","every","idCounter","getModuleGraphWithChildren","newGraph","ensureNodeInNewGraph","moduleName","mod","parse","moduleNames","_moduleNames","parentNames","parents","parentModuleName","parentModule","ctx","queryExecutor","pendingInitialQuery","isInitialized","performQuery","forQuery","filteredBundleStats","fullBundleStats","nodes","edges","nodeId","isRemoved","isNewlyAdded","labelStub","_getPackageFromFilePa2","inPackagePath","nodeColor","getColorForName","borderColor","wasHoisted","containsHoistedModules","isRootNode","nodeSize","addedOrRemoved","label","title","background","border","highlight","scaling","font","margin","top","bottom","borderWidth","shape","oldDependencies","newDependencies","dependencyName","oldDependencyNode","newDependencyNode","dependencyId","inNew","inOld","buildGraphVisualization","getData","summary","e","error","stack","errorMessage","onmessage","messageData","stats","baselineString","prString","setData","postMessage","message","fetch","payloadUrl","then","json","response","catch","__webpack_exports__"],"mappings":"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","file":"371af5a781b3b122f783.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/depgraph-explorer/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/* MIT license */\nvar cssKeywords = require('color-name'); // NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\n\nvar reverseKeywords = {};\n\nfor (var key in cssKeywords) {\n  if (cssKeywords.hasOwnProperty(key)) {\n    reverseKeywords[cssKeywords[key]] = key;\n  }\n}\n\nvar convert = module.exports = {\n  rgb: {\n    channels: 3,\n    labels: 'rgb'\n  },\n  hsl: {\n    channels: 3,\n    labels: 'hsl'\n  },\n  hsv: {\n    channels: 3,\n    labels: 'hsv'\n  },\n  hwb: {\n    channels: 3,\n    labels: 'hwb'\n  },\n  cmyk: {\n    channels: 4,\n    labels: 'cmyk'\n  },\n  xyz: {\n    channels: 3,\n    labels: 'xyz'\n  },\n  lab: {\n    channels: 3,\n    labels: 'lab'\n  },\n  lch: {\n    channels: 3,\n    labels: 'lch'\n  },\n  hex: {\n    channels: 1,\n    labels: ['hex']\n  },\n  keyword: {\n    channels: 1,\n    labels: ['keyword']\n  },\n  ansi16: {\n    channels: 1,\n    labels: ['ansi16']\n  },\n  ansi256: {\n    channels: 1,\n    labels: ['ansi256']\n  },\n  hcg: {\n    channels: 3,\n    labels: ['h', 'c', 'g']\n  },\n  apple: {\n    channels: 3,\n    labels: ['r16', 'g16', 'b16']\n  },\n  gray: {\n    channels: 1,\n    labels: ['gray']\n  }\n}; // hide .channels and .labels properties\n\nfor (var model in convert) {\n  if (convert.hasOwnProperty(model)) {\n    if (!('channels' in convert[model])) {\n      throw new Error('missing channels property: ' + model);\n    }\n\n    if (!('labels' in convert[model])) {\n      throw new Error('missing channel labels property: ' + model);\n    }\n\n    if (convert[model].labels.length !== convert[model].channels) {\n      throw new Error('channel and label counts mismatch: ' + model);\n    }\n\n    var channels = convert[model].channels;\n    var labels = convert[model].labels;\n    delete convert[model].channels;\n    delete convert[model].labels;\n    Object.defineProperty(convert[model], 'channels', {\n      value: channels\n    });\n    Object.defineProperty(convert[model], 'labels', {\n      value: labels\n    });\n  }\n}\n\nconvert.rgb.hsl = function (rgb) {\n  var r = rgb[0] / 255;\n  var g = rgb[1] / 255;\n  var b = rgb[2] / 255;\n  var min = Math.min(r, g, b);\n  var max = Math.max(r, g, b);\n  var delta = max - min;\n  var h;\n  var s;\n  var l;\n\n  if (max === min) {\n    h = 0;\n  } else if (r === max) {\n    h = (g - b) / delta;\n  } else if (g === max) {\n    h = 2 + (b - r) / delta;\n  } else if (b === max) {\n    h = 4 + (r - g) / delta;\n  }\n\n  h = Math.min(h * 60, 360);\n\n  if (h < 0) {\n    h += 360;\n  }\n\n  l = (min + max) / 2;\n\n  if (max === min) {\n    s = 0;\n  } else if (l <= 0.5) {\n    s = delta / (max + min);\n  } else {\n    s = delta / (2 - max - min);\n  }\n\n  return [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n  var rdif;\n  var gdif;\n  var bdif;\n  var h;\n  var s;\n  var r = rgb[0] / 255;\n  var g = rgb[1] / 255;\n  var b = rgb[2] / 255;\n  var v = Math.max(r, g, b);\n  var diff = v - Math.min(r, g, b);\n\n  var diffc = function diffc(c) {\n    return (v - c) / 6 / diff + 1 / 2;\n  };\n\n  if (diff === 0) {\n    h = s = 0;\n  } else {\n    s = diff / v;\n    rdif = diffc(r);\n    gdif = diffc(g);\n    bdif = diffc(b);\n\n    if (r === v) {\n      h = bdif - gdif;\n    } else if (g === v) {\n      h = 1 / 3 + rdif - bdif;\n    } else if (b === v) {\n      h = 2 / 3 + gdif - rdif;\n    }\n\n    if (h < 0) {\n      h += 1;\n    } else if (h > 1) {\n      h -= 1;\n    }\n  }\n\n  return [h * 360, s * 100, v * 100];\n};\n\nconvert.rgb.hwb = function (rgb) {\n  var r = rgb[0];\n  var g = rgb[1];\n  var b = rgb[2];\n  var h = convert.rgb.hsl(rgb)[0];\n  var w = 1 / 255 * Math.min(r, Math.min(g, b));\n  b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n  return [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n  var r = rgb[0] / 255;\n  var g = rgb[1] / 255;\n  var b = rgb[2] / 255;\n  var c;\n  var m;\n  var y;\n  var k;\n  k = Math.min(1 - r, 1 - g, 1 - b);\n  c = (1 - r - k) / (1 - k) || 0;\n  m = (1 - g - k) / (1 - k) || 0;\n  y = (1 - b - k) / (1 - k) || 0;\n  return [c * 100, m * 100, y * 100, k * 100];\n};\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\n\n\nfunction comparativeDistance(x, y) {\n  return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);\n}\n\nconvert.rgb.keyword = function (rgb) {\n  var reversed = reverseKeywords[rgb];\n\n  if (reversed) {\n    return reversed;\n  }\n\n  var currentClosestDistance = Infinity;\n  var currentClosestKeyword;\n\n  for (var keyword in cssKeywords) {\n    if (cssKeywords.hasOwnProperty(keyword)) {\n      var value = cssKeywords[keyword]; // Compute comparative distance\n\n      var distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest\n\n      if (distance < currentClosestDistance) {\n        currentClosestDistance = distance;\n        currentClosestKeyword = keyword;\n      }\n    }\n  }\n\n  return currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n  return cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n  var r = rgb[0] / 255;\n  var g = rgb[1] / 255;\n  var b = rgb[2] / 255; // assume sRGB\n\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n  var x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n  var y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n  var z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n  return [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n  var xyz = convert.rgb.xyz(rgb);\n  var x = xyz[0];\n  var y = xyz[1];\n  var z = xyz[2];\n  var l;\n  var a;\n  var b;\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n  l = 116 * y - 16;\n  a = 500 * (x - y);\n  b = 200 * (y - z);\n  return [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n  var h = hsl[0] / 360;\n  var s = hsl[1] / 100;\n  var l = hsl[2] / 100;\n  var t1;\n  var t2;\n  var t3;\n  var rgb;\n  var val;\n\n  if (s === 0) {\n    val = l * 255;\n    return [val, val, val];\n  }\n\n  if (l < 0.5) {\n    t2 = l * (1 + s);\n  } else {\n    t2 = l + s - l * s;\n  }\n\n  t1 = 2 * l - t2;\n  rgb = [0, 0, 0];\n\n  for (var i = 0; i < 3; i++) {\n    t3 = h + 1 / 3 * -(i - 1);\n\n    if (t3 < 0) {\n      t3++;\n    }\n\n    if (t3 > 1) {\n      t3--;\n    }\n\n    if (6 * t3 < 1) {\n      val = t1 + (t2 - t1) * 6 * t3;\n    } else if (2 * t3 < 1) {\n      val = t2;\n    } else if (3 * t3 < 2) {\n      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n    } else {\n      val = t1;\n    }\n\n    rgb[i] = val * 255;\n  }\n\n  return rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n  var h = hsl[0];\n  var s = hsl[1] / 100;\n  var l = hsl[2] / 100;\n  var smin = s;\n  var lmin = Math.max(l, 0.01);\n  var sv;\n  var v;\n  l *= 2;\n  s *= l <= 1 ? l : 2 - l;\n  smin *= lmin <= 1 ? lmin : 2 - lmin;\n  v = (l + s) / 2;\n  sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);\n  return [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n  var h = hsv[0] / 60;\n  var s = hsv[1] / 100;\n  var v = hsv[2] / 100;\n  var hi = Math.floor(h) % 6;\n  var f = h - Math.floor(h);\n  var p = 255 * v * (1 - s);\n  var q = 255 * v * (1 - s * f);\n  var t = 255 * v * (1 - s * (1 - f));\n  v *= 255;\n\n  switch (hi) {\n    case 0:\n      return [v, t, p];\n\n    case 1:\n      return [q, v, p];\n\n    case 2:\n      return [p, v, t];\n\n    case 3:\n      return [p, q, v];\n\n    case 4:\n      return [t, p, v];\n\n    case 5:\n      return [v, p, q];\n  }\n};\n\nconvert.hsv.hsl = function (hsv) {\n  var h = hsv[0];\n  var s = hsv[1] / 100;\n  var v = hsv[2] / 100;\n  var vmin = Math.max(v, 0.01);\n  var lmin;\n  var sl;\n  var l;\n  l = (2 - s) * v;\n  lmin = (2 - s) * vmin;\n  sl = s * vmin;\n  sl /= lmin <= 1 ? lmin : 2 - lmin;\n  sl = sl || 0;\n  l /= 2;\n  return [h, sl * 100, l * 100];\n}; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb\n\n\nconvert.hwb.rgb = function (hwb) {\n  var h = hwb[0] / 360;\n  var wh = hwb[1] / 100;\n  var bl = hwb[2] / 100;\n  var ratio = wh + bl;\n  var i;\n  var v;\n  var f;\n  var n; // wh + bl cant be > 1\n\n  if (ratio > 1) {\n    wh /= ratio;\n    bl /= ratio;\n  }\n\n  i = Math.floor(6 * h);\n  v = 1 - bl;\n  f = 6 * h - i;\n\n  if ((i & 0x01) !== 0) {\n    f = 1 - f;\n  }\n\n  n = wh + f * (v - wh); // linear interpolation\n\n  var r;\n  var g;\n  var b;\n\n  switch (i) {\n    default:\n    case 6:\n    case 0:\n      r = v;\n      g = n;\n      b = wh;\n      break;\n\n    case 1:\n      r = n;\n      g = v;\n      b = wh;\n      break;\n\n    case 2:\n      r = wh;\n      g = v;\n      b = n;\n      break;\n\n    case 3:\n      r = wh;\n      g = n;\n      b = v;\n      break;\n\n    case 4:\n      r = n;\n      g = wh;\n      b = v;\n      break;\n\n    case 5:\n      r = v;\n      g = wh;\n      b = n;\n      break;\n  }\n\n  return [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n  var c = cmyk[0] / 100;\n  var m = cmyk[1] / 100;\n  var y = cmyk[2] / 100;\n  var k = cmyk[3] / 100;\n  var r;\n  var g;\n  var b;\n  r = 1 - Math.min(1, c * (1 - k) + k);\n  g = 1 - Math.min(1, m * (1 - k) + k);\n  b = 1 - Math.min(1, y * (1 - k) + k);\n  return [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n  var x = xyz[0] / 100;\n  var y = xyz[1] / 100;\n  var z = xyz[2] / 100;\n  var r;\n  var g;\n  var b;\n  r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n  g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n  b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB\n\n  r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;\n  g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;\n  b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;\n  r = Math.min(Math.max(0, r), 1);\n  g = Math.min(Math.max(0, g), 1);\n  b = Math.min(Math.max(0, b), 1);\n  return [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n  var x = xyz[0];\n  var y = xyz[1];\n  var z = xyz[2];\n  var l;\n  var a;\n  var b;\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n  l = 116 * y - 16;\n  a = 500 * (x - y);\n  b = 200 * (y - z);\n  return [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n  var l = lab[0];\n  var a = lab[1];\n  var b = lab[2];\n  var x;\n  var y;\n  var z;\n  y = (l + 16) / 116;\n  x = a / 500 + y;\n  z = y - b / 200;\n  var y2 = Math.pow(y, 3);\n  var x2 = Math.pow(x, 3);\n  var z2 = Math.pow(z, 3);\n  y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n  x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n  z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n  x *= 95.047;\n  y *= 100;\n  z *= 108.883;\n  return [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n  var l = lab[0];\n  var a = lab[1];\n  var b = lab[2];\n  var hr;\n  var h;\n  var c;\n  hr = Math.atan2(b, a);\n  h = hr * 360 / 2 / Math.PI;\n\n  if (h < 0) {\n    h += 360;\n  }\n\n  c = Math.sqrt(a * a + b * b);\n  return [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n  var l = lch[0];\n  var c = lch[1];\n  var h = lch[2];\n  var a;\n  var b;\n  var hr;\n  hr = h / 360 * 2 * Math.PI;\n  a = c * Math.cos(hr);\n  b = c * Math.sin(hr);\n  return [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n  var r = args[0];\n  var g = args[1];\n  var b = args[2];\n  var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n  value = Math.round(value / 50);\n\n  if (value === 0) {\n    return 30;\n  }\n\n  var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));\n\n  if (value === 2) {\n    ansi += 60;\n  }\n\n  return ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n  // optimization here; we already know the value and don't need to get\n  // it converted for us.\n  return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n  var r = args[0];\n  var g = args[1];\n  var b = args[2]; // we use the extended greyscale palette here, with the exception of\n  // black and white. normal palette only has 4 greyscale shades.\n\n  if (r === g && g === b) {\n    if (r < 8) {\n      return 16;\n    }\n\n    if (r > 248) {\n      return 231;\n    }\n\n    return Math.round((r - 8) / 247 * 24) + 232;\n  }\n\n  var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);\n  return ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n  var color = args % 10; // handle greyscale\n\n  if (color === 0 || color === 7) {\n    if (args > 50) {\n      color += 3.5;\n    }\n\n    color = color / 10.5 * 255;\n    return [color, color, color];\n  }\n\n  var mult = (~~(args > 50) + 1) * 0.5;\n  var r = (color & 1) * mult * 255;\n  var g = (color >> 1 & 1) * mult * 255;\n  var b = (color >> 2 & 1) * mult * 255;\n  return [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n  // handle greyscale\n  if (args >= 232) {\n    var c = (args - 232) * 10 + 8;\n    return [c, c, c];\n  }\n\n  args -= 16;\n  var rem;\n  var r = Math.floor(args / 36) / 5 * 255;\n  var g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n  var b = rem % 6 / 5 * 255;\n  return [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n  var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);\n  var string = integer.toString(16).toUpperCase();\n  return '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n  var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\n  if (!match) {\n    return [0, 0, 0];\n  }\n\n  var colorString = match[0];\n\n  if (match[0].length === 3) {\n    colorString = colorString.split('').map(function (_char) {\n      return _char + _char;\n    }).join('');\n  }\n\n  var integer = parseInt(colorString, 16);\n  var r = integer >> 16 & 0xFF;\n  var g = integer >> 8 & 0xFF;\n  var b = integer & 0xFF;\n  return [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n  var r = rgb[0] / 255;\n  var g = rgb[1] / 255;\n  var b = rgb[2] / 255;\n  var max = Math.max(Math.max(r, g), b);\n  var min = Math.min(Math.min(r, g), b);\n  var chroma = max - min;\n  var grayscale;\n  var hue;\n\n  if (chroma < 1) {\n    grayscale = min / (1 - chroma);\n  } else {\n    grayscale = 0;\n  }\n\n  if (chroma <= 0) {\n    hue = 0;\n  } else if (max === r) {\n    hue = (g - b) / chroma % 6;\n  } else if (max === g) {\n    hue = 2 + (b - r) / chroma;\n  } else {\n    hue = 4 + (r - g) / chroma + 4;\n  }\n\n  hue /= 6;\n  hue %= 1;\n  return [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n  var s = hsl[1] / 100;\n  var l = hsl[2] / 100;\n  var c = 1;\n  var f = 0;\n\n  if (l < 0.5) {\n    c = 2.0 * s * l;\n  } else {\n    c = 2.0 * s * (1.0 - l);\n  }\n\n  if (c < 1.0) {\n    f = (l - 0.5 * c) / (1.0 - c);\n  }\n\n  return [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n  var s = hsv[1] / 100;\n  var v = hsv[2] / 100;\n  var c = s * v;\n  var f = 0;\n\n  if (c < 1.0) {\n    f = (v - c) / (1 - c);\n  }\n\n  return [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n  var h = hcg[0] / 360;\n  var c = hcg[1] / 100;\n  var g = hcg[2] / 100;\n\n  if (c === 0.0) {\n    return [g * 255, g * 255, g * 255];\n  }\n\n  var pure = [0, 0, 0];\n  var hi = h % 1 * 6;\n  var v = hi % 1;\n  var w = 1 - v;\n  var mg = 0;\n\n  switch (Math.floor(hi)) {\n    case 0:\n      pure[0] = 1;\n      pure[1] = v;\n      pure[2] = 0;\n      break;\n\n    case 1:\n      pure[0] = w;\n      pure[1] = 1;\n      pure[2] = 0;\n      break;\n\n    case 2:\n      pure[0] = 0;\n      pure[1] = 1;\n      pure[2] = v;\n      break;\n\n    case 3:\n      pure[0] = 0;\n      pure[1] = w;\n      pure[2] = 1;\n      break;\n\n    case 4:\n      pure[0] = v;\n      pure[1] = 0;\n      pure[2] = 1;\n      break;\n\n    default:\n      pure[0] = 1;\n      pure[1] = 0;\n      pure[2] = w;\n  }\n\n  mg = (1.0 - c) * g;\n  return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];\n};\n\nconvert.hcg.hsv = function (hcg) {\n  var c = hcg[1] / 100;\n  var g = hcg[2] / 100;\n  var v = c + g * (1.0 - c);\n  var f = 0;\n\n  if (v > 0.0) {\n    f = c / v;\n  }\n\n  return [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n  var c = hcg[1] / 100;\n  var g = hcg[2] / 100;\n  var l = g * (1.0 - c) + 0.5 * c;\n  var s = 0;\n\n  if (l > 0.0 && l < 0.5) {\n    s = c / (2 * l);\n  } else if (l >= 0.5 && l < 1.0) {\n    s = c / (2 * (1 - l));\n  }\n\n  return [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n  var c = hcg[1] / 100;\n  var g = hcg[2] / 100;\n  var v = c + g * (1.0 - c);\n  return [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n  var w = hwb[1] / 100;\n  var b = hwb[2] / 100;\n  var v = 1 - b;\n  var c = v - w;\n  var g = 0;\n\n  if (c < 1) {\n    g = (v - c) / (1 - c);\n  }\n\n  return [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n  return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n  return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n  return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n  return [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n  return [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n  return [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n  return [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n  var val = Math.round(gray[0] / 100 * 255) & 0xFF;\n  var integer = (val << 16) + (val << 8) + val;\n  var string = integer.toString(16).toUpperCase();\n  return '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n  var val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n  return [val / 255 * 100];\n};","'use strict';\n\nvar colorString = require('color-string');\n\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\nvar skippedModels = [// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n'keyword', // gray conflicts with some method names, and has its own method defined.\n'gray', // shouldn't really be in color-convert either...\n'hex'];\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n  hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\nvar limiters = {};\n\nfunction Color(obj, model) {\n  if (!(this instanceof Color)) {\n    return new Color(obj, model);\n  }\n\n  if (model && model in skippedModels) {\n    model = null;\n  }\n\n  if (model && !(model in convert)) {\n    throw new Error('Unknown model: ' + model);\n  }\n\n  var i;\n  var channels;\n\n  if (obj == null) {\n    // eslint-disable-line no-eq-null,eqeqeq\n    this.model = 'rgb';\n    this.color = [0, 0, 0];\n    this.valpha = 1;\n  } else if (obj instanceof Color) {\n    this.model = obj.model;\n    this.color = obj.color.slice();\n    this.valpha = obj.valpha;\n  } else if (typeof obj === 'string') {\n    var result = colorString.get(obj);\n\n    if (result === null) {\n      throw new Error('Unable to parse color from string: ' + obj);\n    }\n\n    this.model = result.model;\n    channels = convert[this.model].channels;\n    this.color = result.value.slice(0, channels);\n    this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n  } else if (obj.length) {\n    this.model = model || 'rgb';\n    channels = convert[this.model].channels;\n\n    var newArr = _slice.call(obj, 0, channels);\n\n    this.color = zeroArray(newArr, channels);\n    this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n  } else if (typeof obj === 'number') {\n    // this is always RGB - can be converted later on.\n    obj &= 0xFFFFFF;\n    this.model = 'rgb';\n    this.color = [obj >> 16 & 0xFF, obj >> 8 & 0xFF, obj & 0xFF];\n    this.valpha = 1;\n  } else {\n    this.valpha = 1;\n    var keys = Object.keys(obj);\n\n    if ('alpha' in obj) {\n      keys.splice(keys.indexOf('alpha'), 1);\n      this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n    }\n\n    var hashedKeys = keys.sort().join('');\n\n    if (!(hashedKeys in hashedModelKeys)) {\n      throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n    }\n\n    this.model = hashedModelKeys[hashedKeys];\n    var labels = convert[this.model].labels;\n    var color = [];\n\n    for (i = 0; i < labels.length; i++) {\n      color.push(obj[labels[i]]);\n    }\n\n    this.color = zeroArray(color);\n  } // perform limitations (clamping, etc.)\n\n\n  if (limiters[this.model]) {\n    channels = convert[this.model].channels;\n\n    for (i = 0; i < channels; i++) {\n      var limit = limiters[this.model][i];\n\n      if (limit) {\n        this.color[i] = limit(this.color[i]);\n      }\n    }\n  }\n\n  this.valpha = Math.max(0, Math.min(1, this.valpha));\n\n  if (Object.freeze) {\n    Object.freeze(this);\n  }\n}\n\nColor.prototype = {\n  toString: function toString() {\n    return this.string();\n  },\n  toJSON: function toJSON() {\n    return this[this.model]();\n  },\n  string: function string(places) {\n    var self = this.model in colorString.to ? this : this.rgb();\n    self = self.round(typeof places === 'number' ? places : 1);\n    var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n    return colorString.to[self.model](args);\n  },\n  percentString: function percentString(places) {\n    var self = this.rgb().round(typeof places === 'number' ? places : 1);\n    var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n    return colorString.to.rgb.percent(args);\n  },\n  array: function array() {\n    return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n  },\n  object: function object() {\n    var result = {};\n    var channels = convert[this.model].channels;\n    var labels = convert[this.model].labels;\n\n    for (var i = 0; i < channels; i++) {\n      result[labels[i]] = this.color[i];\n    }\n\n    if (this.valpha !== 1) {\n      result.alpha = this.valpha;\n    }\n\n    return result;\n  },\n  unitArray: function unitArray() {\n    var rgb = this.rgb().color;\n    rgb[0] /= 255;\n    rgb[1] /= 255;\n    rgb[2] /= 255;\n\n    if (this.valpha !== 1) {\n      rgb.push(this.valpha);\n    }\n\n    return rgb;\n  },\n  unitObject: function unitObject() {\n    var rgb = this.rgb().object();\n    rgb.r /= 255;\n    rgb.g /= 255;\n    rgb.b /= 255;\n\n    if (this.valpha !== 1) {\n      rgb.alpha = this.valpha;\n    }\n\n    return rgb;\n  },\n  round: function round(places) {\n    places = Math.max(places || 0, 0);\n    return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n  },\n  alpha: function alpha(val) {\n    if (arguments.length) {\n      return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n    }\n\n    return this.valpha;\n  },\n  // rgb\n  red: getset('rgb', 0, maxfn(255)),\n  green: getset('rgb', 1, maxfn(255)),\n  blue: getset('rgb', 2, maxfn(255)),\n  hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) {\n    return (val % 360 + 360) % 360;\n  }),\n  // eslint-disable-line brace-style\n  saturationl: getset('hsl', 1, maxfn(100)),\n  lightness: getset('hsl', 2, maxfn(100)),\n  saturationv: getset('hsv', 1, maxfn(100)),\n  value: getset('hsv', 2, maxfn(100)),\n  chroma: getset('hcg', 1, maxfn(100)),\n  gray: getset('hcg', 2, maxfn(100)),\n  white: getset('hwb', 1, maxfn(100)),\n  wblack: getset('hwb', 2, maxfn(100)),\n  cyan: getset('cmyk', 0, maxfn(100)),\n  magenta: getset('cmyk', 1, maxfn(100)),\n  yellow: getset('cmyk', 2, maxfn(100)),\n  black: getset('cmyk', 3, maxfn(100)),\n  x: getset('xyz', 0, maxfn(100)),\n  y: getset('xyz', 1, maxfn(100)),\n  z: getset('xyz', 2, maxfn(100)),\n  l: getset('lab', 0, maxfn(100)),\n  a: getset('lab', 1),\n  b: getset('lab', 2),\n  keyword: function keyword(val) {\n    if (arguments.length) {\n      return new Color(val);\n    }\n\n    return convert[this.model].keyword(this.color);\n  },\n  hex: function hex(val) {\n    if (arguments.length) {\n      return new Color(val);\n    }\n\n    return colorString.to.hex(this.rgb().round().color);\n  },\n  rgbNumber: function rgbNumber() {\n    var rgb = this.rgb().color;\n    return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;\n  },\n  luminosity: function luminosity() {\n    // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n    var rgb = this.rgb().color;\n    var lum = [];\n\n    for (var i = 0; i < rgb.length; i++) {\n      var chan = rgb[i] / 255;\n      lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);\n    }\n\n    return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n  },\n  contrast: function contrast(color2) {\n    // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n    var lum1 = this.luminosity();\n    var lum2 = color2.luminosity();\n\n    if (lum1 > lum2) {\n      return (lum1 + 0.05) / (lum2 + 0.05);\n    }\n\n    return (lum2 + 0.05) / (lum1 + 0.05);\n  },\n  level: function level(color2) {\n    var contrastRatio = this.contrast(color2);\n\n    if (contrastRatio >= 7.1) {\n      return 'AAA';\n    }\n\n    return contrastRatio >= 4.5 ? 'AA' : '';\n  },\n  isDark: function isDark() {\n    // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n    var rgb = this.rgb().color;\n    var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n    return yiq < 128;\n  },\n  isLight: function isLight() {\n    return !this.isDark();\n  },\n  negate: function negate() {\n    var rgb = this.rgb();\n\n    for (var i = 0; i < 3; i++) {\n      rgb.color[i] = 255 - rgb.color[i];\n    }\n\n    return rgb;\n  },\n  lighten: function lighten(ratio) {\n    var hsl = this.hsl();\n    hsl.color[2] += hsl.color[2] * ratio;\n    return hsl;\n  },\n  darken: function darken(ratio) {\n    var hsl = this.hsl();\n    hsl.color[2] -= hsl.color[2] * ratio;\n    return hsl;\n  },\n  saturate: function saturate(ratio) {\n    var hsl = this.hsl();\n    hsl.color[1] += hsl.color[1] * ratio;\n    return hsl;\n  },\n  desaturate: function desaturate(ratio) {\n    var hsl = this.hsl();\n    hsl.color[1] -= hsl.color[1] * ratio;\n    return hsl;\n  },\n  whiten: function whiten(ratio) {\n    var hwb = this.hwb();\n    hwb.color[1] += hwb.color[1] * ratio;\n    return hwb;\n  },\n  blacken: function blacken(ratio) {\n    var hwb = this.hwb();\n    hwb.color[2] += hwb.color[2] * ratio;\n    return hwb;\n  },\n  grayscale: function grayscale() {\n    // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n    var rgb = this.rgb().color;\n    var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n    return Color.rgb(val, val, val);\n  },\n  fade: function fade(ratio) {\n    return this.alpha(this.valpha - this.valpha * ratio);\n  },\n  opaquer: function opaquer(ratio) {\n    return this.alpha(this.valpha + this.valpha * ratio);\n  },\n  rotate: function rotate(degrees) {\n    var hsl = this.hsl();\n    var hue = hsl.color[0];\n    hue = (hue + degrees) % 360;\n    hue = hue < 0 ? 360 + hue : hue;\n    hsl.color[0] = hue;\n    return hsl;\n  },\n  mix: function mix(mixinColor, weight) {\n    // ported from sass implementation in C\n    // https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n    if (!mixinColor || !mixinColor.rgb) {\n      throw new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n    }\n\n    var color1 = mixinColor.rgb();\n    var color2 = this.rgb();\n    var p = weight === undefined ? 0.5 : weight;\n    var w = 2 * p - 1;\n    var a = color1.alpha() - color2.alpha();\n    var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n    var w2 = 1 - w1;\n    return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));\n  }\n}; // model conversion methods and static constructors\n\nObject.keys(convert).forEach(function (model) {\n  if (skippedModels.indexOf(model) !== -1) {\n    return;\n  }\n\n  var channels = convert[model].channels; // conversion methods\n\n  Color.prototype[model] = function () {\n    if (this.model === model) {\n      return new Color(this);\n    }\n\n    if (arguments.length) {\n      return new Color(arguments, model);\n    }\n\n    var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n    return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n  }; // 'static' construction methods\n\n\n  Color[model] = function (color) {\n    if (typeof color === 'number') {\n      color = zeroArray(_slice.call(arguments), channels);\n    }\n\n    return new Color(color, model);\n  };\n});\n\nfunction roundTo(num, places) {\n  return Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n  return function (num) {\n    return roundTo(num, places);\n  };\n}\n\nfunction getset(model, channel, modifier) {\n  model = Array.isArray(model) ? model : [model];\n  model.forEach(function (m) {\n    (limiters[m] || (limiters[m] = []))[channel] = modifier;\n  });\n  model = model[0];\n  return function (val) {\n    var result;\n\n    if (arguments.length) {\n      if (modifier) {\n        val = modifier(val);\n      }\n\n      result = this[model]();\n      result.color[channel] = val;\n      return result;\n    }\n\n    result = this[model]().color[channel];\n\n    if (modifier) {\n      result = modifier(result);\n    }\n\n    return result;\n  };\n}\n\nfunction maxfn(max) {\n  return function (v) {\n    return Math.max(0, Math.min(max, v));\n  };\n}\n\nfunction assertArray(val) {\n  return Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n  for (var i = 0; i < length; i++) {\n    if (typeof arr[i] !== 'number') {\n      arr[i] = 0;\n    }\n  }\n\n  return arr;\n}\n\nmodule.exports = Color;","/* MIT license */\nvar colorNames = require('color-name');\n\nvar swizzle = require('simple-swizzle');\n\nvar reverseNames = {}; // create a list of reverse color names\n\nfor (var name in colorNames) {\n  if (colorNames.hasOwnProperty(name)) {\n    reverseNames[colorNames[name]] = name;\n  }\n}\n\nvar cs = module.exports = {\n  to: {},\n  get: {}\n};\n\ncs.get = function (string) {\n  var prefix = string.substring(0, 3).toLowerCase();\n  var val;\n  var model;\n\n  switch (prefix) {\n    case 'hsl':\n      val = cs.get.hsl(string);\n      model = 'hsl';\n      break;\n\n    case 'hwb':\n      val = cs.get.hwb(string);\n      model = 'hwb';\n      break;\n\n    default:\n      val = cs.get.rgb(string);\n      model = 'rgb';\n      break;\n  }\n\n  if (!val) {\n    return null;\n  }\n\n  return {\n    model: model,\n    value: val\n  };\n};\n\ncs.get.rgb = function (string) {\n  if (!string) {\n    return null;\n  }\n\n  var abbr = /^#([a-f0-9]{3,4})$/i;\n  var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n  var rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n  var per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n  var keyword = /(\\D+)/;\n  var rgb = [0, 0, 0, 1];\n  var match;\n  var i;\n  var hexAlpha;\n\n  if (match = string.match(hex)) {\n    hexAlpha = match[2];\n    match = match[1];\n\n    for (i = 0; i < 3; i++) {\n      // https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n      var i2 = i * 2;\n      rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n    }\n\n    if (hexAlpha) {\n      rgb[3] = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;\n    }\n  } else if (match = string.match(abbr)) {\n    match = match[1];\n    hexAlpha = match[3];\n\n    for (i = 0; i < 3; i++) {\n      rgb[i] = parseInt(match[i] + match[i], 16);\n    }\n\n    if (hexAlpha) {\n      rgb[3] = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;\n    }\n  } else if (match = string.match(rgba)) {\n    for (i = 0; i < 3; i++) {\n      rgb[i] = parseInt(match[i + 1], 0);\n    }\n\n    if (match[4]) {\n      rgb[3] = parseFloat(match[4]);\n    }\n  } else if (match = string.match(per)) {\n    for (i = 0; i < 3; i++) {\n      rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n    }\n\n    if (match[4]) {\n      rgb[3] = parseFloat(match[4]);\n    }\n  } else if (match = string.match(keyword)) {\n    if (match[1] === 'transparent') {\n      return [0, 0, 0, 0];\n    }\n\n    rgb = colorNames[match[1]];\n\n    if (!rgb) {\n      return null;\n    }\n\n    rgb[3] = 1;\n    return rgb;\n  } else {\n    return null;\n  }\n\n  for (i = 0; i < 3; i++) {\n    rgb[i] = clamp(rgb[i], 0, 255);\n  }\n\n  rgb[3] = clamp(rgb[3], 0, 1);\n  return rgb;\n};\n\ncs.get.hsl = function (string) {\n  if (!string) {\n    return null;\n  }\n\n  var hsl = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n  var match = string.match(hsl);\n\n  if (match) {\n    var alpha = parseFloat(match[4]);\n    var h = (parseFloat(match[1]) + 360) % 360;\n    var s = clamp(parseFloat(match[2]), 0, 100);\n    var l = clamp(parseFloat(match[3]), 0, 100);\n    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n    return [h, s, l, a];\n  }\n\n  return null;\n};\n\ncs.get.hwb = function (string) {\n  if (!string) {\n    return null;\n  }\n\n  var hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n  var match = string.match(hwb);\n\n  if (match) {\n    var alpha = parseFloat(match[4]);\n    var h = (parseFloat(match[1]) % 360 + 360) % 360;\n    var w = clamp(parseFloat(match[2]), 0, 100);\n    var b = clamp(parseFloat(match[3]), 0, 100);\n    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n    return [h, w, b, a];\n  }\n\n  return null;\n};\n\ncs.to.hex = function () {\n  var rgba = swizzle(arguments);\n  return '#' + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : '');\n};\n\ncs.to.rgb = function () {\n  var rgba = swizzle(arguments);\n  return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')' : 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n  var rgba = swizzle(arguments);\n  var r = Math.round(rgba[0] / 255 * 100);\n  var g = Math.round(rgba[1] / 255 * 100);\n  var b = Math.round(rgba[2] / 255 * 100);\n  return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)' : 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n  var hsla = swizzle(arguments);\n  return hsla.length < 4 || hsla[3] === 1 ? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)' : 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n}; // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\n\n\ncs.to.hwb = function () {\n  var hwba = swizzle(arguments);\n  var a = '';\n\n  if (hwba.length >= 4 && hwba[3] !== 1) {\n    a = ', ' + hwba[3];\n  }\n\n  return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n  return reverseNames[rgb.slice(0, 3)];\n}; // helpers\n\n\nfunction clamp(num, min, max) {\n  return Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n  var str = num.toString(16).toUpperCase();\n  return str.length < 2 ? '0' + str : str;\n}","'use strict';\n\nmodule.exports = {\n  \"aliceblue\": [240, 248, 255],\n  \"antiquewhite\": [250, 235, 215],\n  \"aqua\": [0, 255, 255],\n  \"aquamarine\": [127, 255, 212],\n  \"azure\": [240, 255, 255],\n  \"beige\": [245, 245, 220],\n  \"bisque\": [255, 228, 196],\n  \"black\": [0, 0, 0],\n  \"blanchedalmond\": [255, 235, 205],\n  \"blue\": [0, 0, 255],\n  \"blueviolet\": [138, 43, 226],\n  \"brown\": [165, 42, 42],\n  \"burlywood\": [222, 184, 135],\n  \"cadetblue\": [95, 158, 160],\n  \"chartreuse\": [127, 255, 0],\n  \"chocolate\": [210, 105, 30],\n  \"coral\": [255, 127, 80],\n  \"cornflowerblue\": [100, 149, 237],\n  \"cornsilk\": [255, 248, 220],\n  \"crimson\": [220, 20, 60],\n  \"cyan\": [0, 255, 255],\n  \"darkblue\": [0, 0, 139],\n  \"darkcyan\": [0, 139, 139],\n  \"darkgoldenrod\": [184, 134, 11],\n  \"darkgray\": [169, 169, 169],\n  \"darkgreen\": [0, 100, 0],\n  \"darkgrey\": [169, 169, 169],\n  \"darkkhaki\": [189, 183, 107],\n  \"darkmagenta\": [139, 0, 139],\n  \"darkolivegreen\": [85, 107, 47],\n  \"darkorange\": [255, 140, 0],\n  \"darkorchid\": [153, 50, 204],\n  \"darkred\": [139, 0, 0],\n  \"darksalmon\": [233, 150, 122],\n  \"darkseagreen\": [143, 188, 143],\n  \"darkslateblue\": [72, 61, 139],\n  \"darkslategray\": [47, 79, 79],\n  \"darkslategrey\": [47, 79, 79],\n  \"darkturquoise\": [0, 206, 209],\n  \"darkviolet\": [148, 0, 211],\n  \"deeppink\": [255, 20, 147],\n  \"deepskyblue\": [0, 191, 255],\n  \"dimgray\": [105, 105, 105],\n  \"dimgrey\": [105, 105, 105],\n  \"dodgerblue\": [30, 144, 255],\n  \"firebrick\": [178, 34, 34],\n  \"floralwhite\": [255, 250, 240],\n  \"forestgreen\": [34, 139, 34],\n  \"fuchsia\": [255, 0, 255],\n  \"gainsboro\": [220, 220, 220],\n  \"ghostwhite\": [248, 248, 255],\n  \"gold\": [255, 215, 0],\n  \"goldenrod\": [218, 165, 32],\n  \"gray\": [128, 128, 128],\n  \"green\": [0, 128, 0],\n  \"greenyellow\": [173, 255, 47],\n  \"grey\": [128, 128, 128],\n  \"honeydew\": [240, 255, 240],\n  \"hotpink\": [255, 105, 180],\n  \"indianred\": [205, 92, 92],\n  \"indigo\": [75, 0, 130],\n  \"ivory\": [255, 255, 240],\n  \"khaki\": [240, 230, 140],\n  \"lavender\": [230, 230, 250],\n  \"lavenderblush\": [255, 240, 245],\n  \"lawngreen\": [124, 252, 0],\n  \"lemonchiffon\": [255, 250, 205],\n  \"lightblue\": [173, 216, 230],\n  \"lightcoral\": [240, 128, 128],\n  \"lightcyan\": [224, 255, 255],\n  \"lightgoldenrodyellow\": [250, 250, 210],\n  \"lightgray\": [211, 211, 211],\n  \"lightgreen\": [144, 238, 144],\n  \"lightgrey\": [211, 211, 211],\n  \"lightpink\": [255, 182, 193],\n  \"lightsalmon\": [255, 160, 122],\n  \"lightseagreen\": [32, 178, 170],\n  \"lightskyblue\": [135, 206, 250],\n  \"lightslategray\": [119, 136, 153],\n  \"lightslategrey\": [119, 136, 153],\n  \"lightsteelblue\": [176, 196, 222],\n  \"lightyellow\": [255, 255, 224],\n  \"lime\": [0, 255, 0],\n  \"limegreen\": [50, 205, 50],\n  \"linen\": [250, 240, 230],\n  \"magenta\": [255, 0, 255],\n  \"maroon\": [128, 0, 0],\n  \"mediumaquamarine\": [102, 205, 170],\n  \"mediumblue\": [0, 0, 205],\n  \"mediumorchid\": [186, 85, 211],\n  \"mediumpurple\": [147, 112, 219],\n  \"mediumseagreen\": [60, 179, 113],\n  \"mediumslateblue\": [123, 104, 238],\n  \"mediumspringgreen\": [0, 250, 154],\n  \"mediumturquoise\": [72, 209, 204],\n  \"mediumvioletred\": [199, 21, 133],\n  \"midnightblue\": [25, 25, 112],\n  \"mintcream\": [245, 255, 250],\n  \"mistyrose\": [255, 228, 225],\n  \"moccasin\": [255, 228, 181],\n  \"navajowhite\": [255, 222, 173],\n  \"navy\": [0, 0, 128],\n  \"oldlace\": [253, 245, 230],\n  \"olive\": [128, 128, 0],\n  \"olivedrab\": [107, 142, 35],\n  \"orange\": [255, 165, 0],\n  \"orangered\": [255, 69, 0],\n  \"orchid\": [218, 112, 214],\n  \"palegoldenrod\": [238, 232, 170],\n  \"palegreen\": [152, 251, 152],\n  \"paleturquoise\": [175, 238, 238],\n  \"palevioletred\": [219, 112, 147],\n  \"papayawhip\": [255, 239, 213],\n  \"peachpuff\": [255, 218, 185],\n  \"peru\": [205, 133, 63],\n  \"pink\": [255, 192, 203],\n  \"plum\": [221, 160, 221],\n  \"powderblue\": [176, 224, 230],\n  \"purple\": [128, 0, 128],\n  \"rebeccapurple\": [102, 51, 153],\n  \"red\": [255, 0, 0],\n  \"rosybrown\": [188, 143, 143],\n  \"royalblue\": [65, 105, 225],\n  \"saddlebrown\": [139, 69, 19],\n  \"salmon\": [250, 128, 114],\n  \"sandybrown\": [244, 164, 96],\n  \"seagreen\": [46, 139, 87],\n  \"seashell\": [255, 245, 238],\n  \"sienna\": [160, 82, 45],\n  \"silver\": [192, 192, 192],\n  \"skyblue\": [135, 206, 235],\n  \"slateblue\": [106, 90, 205],\n  \"slategray\": [112, 128, 144],\n  \"slategrey\": [112, 128, 144],\n  \"snow\": [255, 250, 250],\n  \"springgreen\": [0, 255, 127],\n  \"steelblue\": [70, 130, 180],\n  \"tan\": [210, 180, 140],\n  \"teal\": [0, 128, 128],\n  \"thistle\": [216, 191, 216],\n  \"tomato\": [255, 99, 71],\n  \"turquoise\": [64, 224, 208],\n  \"violet\": [238, 130, 238],\n  \"wheat\": [245, 222, 179],\n  \"white\": [255, 255, 255],\n  \"whitesmoke\": [245, 245, 245],\n  \"yellow\": [255, 255, 0],\n  \"yellowgreen\": [154, 205, 50]\n};","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n  var results = [];\n\n  for (var i = 0, len = args.length; i < len; i++) {\n    var arg = args[i];\n\n    if (isArrayish(arg)) {\n      // http://jsperf.com/javascript-array-concat-vs-push/98\n      results = concat.call(results, slice.call(arg));\n    } else {\n      results.push(arg);\n    }\n  }\n\n  return results;\n};\n\nswizzle.wrap = function (fn) {\n  return function () {\n    return fn(swizzle(arguments));\n  };\n};","module.exports = function isArrayish(obj) {\n  if (!obj || typeof obj === 'string') {\n    return false;\n  }\n\n  return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== 'String');\n};","var conversions = require('./conversions');\n\nvar route = require('./route');\n\nvar convert = {};\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n  var wrappedFn = function wrappedFn(args) {\n    if (args === undefined || args === null) {\n      return args;\n    }\n\n    if (arguments.length > 1) {\n      args = Array.prototype.slice.call(arguments);\n    }\n\n    return fn(args);\n  }; // preserve .conversion property if there is one\n\n\n  if ('conversion' in fn) {\n    wrappedFn.conversion = fn.conversion;\n  }\n\n  return wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n  var wrappedFn = function wrappedFn(args) {\n    if (args === undefined || args === null) {\n      return args;\n    }\n\n    if (arguments.length > 1) {\n      args = Array.prototype.slice.call(arguments);\n    }\n\n    var result = fn(args); // we're assuming the result is an array here.\n    // see notice in conversions.js; don't use box types\n    // in conversion functions.\n\n    if (typeof result === 'object') {\n      for (var len = result.length, i = 0; i < len; i++) {\n        result[i] = Math.round(result[i]);\n      }\n    }\n\n    return result;\n  }; // preserve .conversion property if there is one\n\n\n  if ('conversion' in fn) {\n    wrappedFn.conversion = fn.conversion;\n  }\n\n  return wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n  convert[fromModel] = {};\n  Object.defineProperty(convert[fromModel], 'channels', {\n    value: conversions[fromModel].channels\n  });\n  Object.defineProperty(convert[fromModel], 'labels', {\n    value: conversions[fromModel].labels\n  });\n  var routes = route(fromModel);\n  var routeModels = Object.keys(routes);\n  routeModels.forEach(function (toModel) {\n    var fn = routes[toModel];\n    convert[fromModel][toModel] = wrapRounded(fn);\n    convert[fromModel][toModel].raw = wrapRaw(fn);\n  });\n});\nmodule.exports = convert;","'use strict';\n\nmodule.exports = {\n  \"aliceblue\": [240, 248, 255],\n  \"antiquewhite\": [250, 235, 215],\n  \"aqua\": [0, 255, 255],\n  \"aquamarine\": [127, 255, 212],\n  \"azure\": [240, 255, 255],\n  \"beige\": [245, 245, 220],\n  \"bisque\": [255, 228, 196],\n  \"black\": [0, 0, 0],\n  \"blanchedalmond\": [255, 235, 205],\n  \"blue\": [0, 0, 255],\n  \"blueviolet\": [138, 43, 226],\n  \"brown\": [165, 42, 42],\n  \"burlywood\": [222, 184, 135],\n  \"cadetblue\": [95, 158, 160],\n  \"chartreuse\": [127, 255, 0],\n  \"chocolate\": [210, 105, 30],\n  \"coral\": [255, 127, 80],\n  \"cornflowerblue\": [100, 149, 237],\n  \"cornsilk\": [255, 248, 220],\n  \"crimson\": [220, 20, 60],\n  \"cyan\": [0, 255, 255],\n  \"darkblue\": [0, 0, 139],\n  \"darkcyan\": [0, 139, 139],\n  \"darkgoldenrod\": [184, 134, 11],\n  \"darkgray\": [169, 169, 169],\n  \"darkgreen\": [0, 100, 0],\n  \"darkgrey\": [169, 169, 169],\n  \"darkkhaki\": [189, 183, 107],\n  \"darkmagenta\": [139, 0, 139],\n  \"darkolivegreen\": [85, 107, 47],\n  \"darkorange\": [255, 140, 0],\n  \"darkorchid\": [153, 50, 204],\n  \"darkred\": [139, 0, 0],\n  \"darksalmon\": [233, 150, 122],\n  \"darkseagreen\": [143, 188, 143],\n  \"darkslateblue\": [72, 61, 139],\n  \"darkslategray\": [47, 79, 79],\n  \"darkslategrey\": [47, 79, 79],\n  \"darkturquoise\": [0, 206, 209],\n  \"darkviolet\": [148, 0, 211],\n  \"deeppink\": [255, 20, 147],\n  \"deepskyblue\": [0, 191, 255],\n  \"dimgray\": [105, 105, 105],\n  \"dimgrey\": [105, 105, 105],\n  \"dodgerblue\": [30, 144, 255],\n  \"firebrick\": [178, 34, 34],\n  \"floralwhite\": [255, 250, 240],\n  \"forestgreen\": [34, 139, 34],\n  \"fuchsia\": [255, 0, 255],\n  \"gainsboro\": [220, 220, 220],\n  \"ghostwhite\": [248, 248, 255],\n  \"gold\": [255, 215, 0],\n  \"goldenrod\": [218, 165, 32],\n  \"gray\": [128, 128, 128],\n  \"green\": [0, 128, 0],\n  \"greenyellow\": [173, 255, 47],\n  \"grey\": [128, 128, 128],\n  \"honeydew\": [240, 255, 240],\n  \"hotpink\": [255, 105, 180],\n  \"indianred\": [205, 92, 92],\n  \"indigo\": [75, 0, 130],\n  \"ivory\": [255, 255, 240],\n  \"khaki\": [240, 230, 140],\n  \"lavender\": [230, 230, 250],\n  \"lavenderblush\": [255, 240, 245],\n  \"lawngreen\": [124, 252, 0],\n  \"lemonchiffon\": [255, 250, 205],\n  \"lightblue\": [173, 216, 230],\n  \"lightcoral\": [240, 128, 128],\n  \"lightcyan\": [224, 255, 255],\n  \"lightgoldenrodyellow\": [250, 250, 210],\n  \"lightgray\": [211, 211, 211],\n  \"lightgreen\": [144, 238, 144],\n  \"lightgrey\": [211, 211, 211],\n  \"lightpink\": [255, 182, 193],\n  \"lightsalmon\": [255, 160, 122],\n  \"lightseagreen\": [32, 178, 170],\n  \"lightskyblue\": [135, 206, 250],\n  \"lightslategray\": [119, 136, 153],\n  \"lightslategrey\": [119, 136, 153],\n  \"lightsteelblue\": [176, 196, 222],\n  \"lightyellow\": [255, 255, 224],\n  \"lime\": [0, 255, 0],\n  \"limegreen\": [50, 205, 50],\n  \"linen\": [250, 240, 230],\n  \"magenta\": [255, 0, 255],\n  \"maroon\": [128, 0, 0],\n  \"mediumaquamarine\": [102, 205, 170],\n  \"mediumblue\": [0, 0, 205],\n  \"mediumorchid\": [186, 85, 211],\n  \"mediumpurple\": [147, 112, 219],\n  \"mediumseagreen\": [60, 179, 113],\n  \"mediumslateblue\": [123, 104, 238],\n  \"mediumspringgreen\": [0, 250, 154],\n  \"mediumturquoise\": [72, 209, 204],\n  \"mediumvioletred\": [199, 21, 133],\n  \"midnightblue\": [25, 25, 112],\n  \"mintcream\": [245, 255, 250],\n  \"mistyrose\": [255, 228, 225],\n  \"moccasin\": [255, 228, 181],\n  \"navajowhite\": [255, 222, 173],\n  \"navy\": [0, 0, 128],\n  \"oldlace\": [253, 245, 230],\n  \"olive\": [128, 128, 0],\n  \"olivedrab\": [107, 142, 35],\n  \"orange\": [255, 165, 0],\n  \"orangered\": [255, 69, 0],\n  \"orchid\": [218, 112, 214],\n  \"palegoldenrod\": [238, 232, 170],\n  \"palegreen\": [152, 251, 152],\n  \"paleturquoise\": [175, 238, 238],\n  \"palevioletred\": [219, 112, 147],\n  \"papayawhip\": [255, 239, 213],\n  \"peachpuff\": [255, 218, 185],\n  \"peru\": [205, 133, 63],\n  \"pink\": [255, 192, 203],\n  \"plum\": [221, 160, 221],\n  \"powderblue\": [176, 224, 230],\n  \"purple\": [128, 0, 128],\n  \"rebeccapurple\": [102, 51, 153],\n  \"red\": [255, 0, 0],\n  \"rosybrown\": [188, 143, 143],\n  \"royalblue\": [65, 105, 225],\n  \"saddlebrown\": [139, 69, 19],\n  \"salmon\": [250, 128, 114],\n  \"sandybrown\": [244, 164, 96],\n  \"seagreen\": [46, 139, 87],\n  \"seashell\": [255, 245, 238],\n  \"sienna\": [160, 82, 45],\n  \"silver\": [192, 192, 192],\n  \"skyblue\": [135, 206, 235],\n  \"slateblue\": [106, 90, 205],\n  \"slategray\": [112, 128, 144],\n  \"slategrey\": [112, 128, 144],\n  \"snow\": [255, 250, 250],\n  \"springgreen\": [0, 255, 127],\n  \"steelblue\": [70, 130, 180],\n  \"tan\": [210, 180, 140],\n  \"teal\": [0, 128, 128],\n  \"thistle\": [216, 191, 216],\n  \"tomato\": [255, 99, 71],\n  \"turquoise\": [64, 224, 208],\n  \"violet\": [238, 130, 238],\n  \"wheat\": [245, 222, 179],\n  \"white\": [255, 255, 255],\n  \"whitesmoke\": [245, 245, 245],\n  \"yellow\": [255, 255, 0],\n  \"yellowgreen\": [154, 205, 50]\n};","var conversions = require('./conversions');\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\n\nfunction buildGraph() {\n  var graph = {}; // https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\n  var models = Object.keys(conversions);\n\n  for (var len = models.length, i = 0; i < len; i++) {\n    graph[models[i]] = {\n      // http://jsperf.com/1-vs-infinity\n      // micro-opt, but this is simple.\n      distance: -1,\n      parent: null\n    };\n  }\n\n  return graph;\n} // https://en.wikipedia.org/wiki/Breadth-first_search\n\n\nfunction deriveBFS(fromModel) {\n  var graph = buildGraph();\n  var queue = [fromModel]; // unshift -> queue -> pop\n\n  graph[fromModel].distance = 0;\n\n  while (queue.length) {\n    var current = queue.pop();\n    var adjacents = Object.keys(conversions[current]);\n\n    for (var len = adjacents.length, i = 0; i < len; i++) {\n      var adjacent = adjacents[i];\n      var node = graph[adjacent];\n\n      if (node.distance === -1) {\n        node.distance = graph[current].distance + 1;\n        node.parent = current;\n        queue.unshift(adjacent);\n      }\n    }\n  }\n\n  return graph;\n}\n\nfunction link(from, to) {\n  return function (args) {\n    return to(from(args));\n  };\n}\n\nfunction wrapConversion(toModel, graph) {\n  var path = [graph[toModel].parent, toModel];\n  var fn = conversions[graph[toModel].parent][toModel];\n  var cur = graph[toModel].parent;\n\n  while (graph[cur].parent) {\n    path.unshift(graph[cur].parent);\n    fn = link(conversions[graph[cur].parent][cur], fn);\n    cur = graph[cur].parent;\n  }\n\n  fn.conversion = path;\n  return fn;\n}\n\nmodule.exports = function (fromModel) {\n  var graph = deriveBFS(fromModel);\n  var conversion = {};\n  var models = Object.keys(graph);\n\n  for (var len = models.length, i = 0; i < len; i++) {\n    var toModel = models[i];\n    var node = graph[toModel];\n\n    if (node.parent === null) {\n      // no possible conversion, or this node is the source model.\n      continue;\n    }\n\n    conversion[toModel] = wrapConversion(toModel, graph);\n  }\n\n  return conversion;\n};","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import { BothBundleStats } from \"../reducers/schema\";\r\nimport { Query } from \"../utils/Query\";\r\nimport {\r\n  ModuleGraphWithChildren,\r\n  ModuleGraphNodeWithChildren\r\n} from \"webpack-bundle-diff-add-children\";\r\n\r\nconst traverseGraph = (\r\n  startingNodes: ModuleGraphNodeWithChildren[],\r\n  getSucessors: (\r\n    node: ModuleGraphNodeWithChildren\r\n  ) => ModuleGraphNodeWithChildren[]\r\n) => {\r\n  const visitedIds = new Set();\r\n  startingNodes.forEach(node => visitedIds.add(node.id));\r\n\r\n  const frontier: ModuleGraphNodeWithChildren[] = startingNodes.slice();\r\n  const result: ModuleGraphNodeWithChildren[] = [];\r\n  while (frontier.length) {\r\n    const current: ModuleGraphNodeWithChildren | undefined = frontier.pop();\r\n    if (!current) {\r\n      return result;\r\n    }\r\n    visitedIds.add(current.id);\r\n\r\n    // add to result\r\n    result.push(current);\r\n\r\n    // add successors to frontier\r\n    getSucessors(current)\r\n      .filter(node => !visitedIds.has(node.id))\r\n      .forEach(node => frontier.unshift(node));\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst fileNamePathToRegex = (\r\n  fileName: string,\r\n  options: { caseSensitive: boolean }\r\n): RegExp => {\r\n  const splitOnStar = fileName.split(/\\*/g);\r\n  return new RegExp(\r\n    splitOnStar.join(\".*\"),\r\n    options.caseSensitive ? undefined : \"i\"\r\n  );\r\n};\r\n\r\nfunction intersection<T>(setA: Set<T>, setB: Set<T>): Set<T> {\r\n  var _intersection = new Set<T>();\r\n  setB.forEach(elem => {\r\n    if (setA.has(elem)) {\r\n      _intersection.add(elem);\r\n    }\r\n  });\r\n  return _intersection;\r\n}\r\n\r\nconst applyQuery = (\r\n  bothGraphs: BothBundleStats,\r\n  graph: ModuleGraphWithChildren,\r\n  query: Query\r\n): ModuleGraphNodeWithChildren[] => {\r\n  switch (query.type) {\r\n    case \"FILENAME\":\r\n      const filterRegex = fileNamePathToRegex(query.fileName, {\r\n        caseSensitive: query.caseSensitive\r\n      });\r\n      return Object.values(graph).filter(node => {\r\n        return filterRegex.exec(node.name);\r\n      });\r\n    case \"INCLUDES\":\r\n      const innerIncludeQueryResults = applyQuery(\r\n        bothGraphs,\r\n        graph,\r\n        query.target\r\n      );\r\n      return traverseGraph(innerIncludeQueryResults, node =>\r\n        node.dependants.map(parentNodeName => graph[parentNodeName])\r\n      );\r\n    case \"INCLUDEDBY\":\r\n      const innerIncludedByQueryResults = applyQuery(\r\n        bothGraphs,\r\n        graph,\r\n        query.target\r\n      );\r\n      return traverseGraph(innerIncludedByQueryResults, node =>\r\n        node.dependencies.map(childNodeName => graph[childNodeName])\r\n      );\r\n    case \"AND\":\r\n      const andLeftNames = applyQuery(bothGraphs, graph, query.left).map(\r\n        node => node.name\r\n      );\r\n      const andRightNames = applyQuery(bothGraphs, graph, query.right).map(\r\n        node => node.name\r\n      );\r\n      return Array.from(\r\n        intersection(new Set(andLeftNames), new Set(andRightNames))\r\n      ).map(name => graph[name]);\r\n    case \"OR\":\r\n      const orLeftNames = applyQuery(bothGraphs, graph, query.left).map(\r\n        node => node.name\r\n      );\r\n      const orRightNames = applyQuery(bothGraphs, graph, query.right).map(\r\n        node => node.name\r\n      );\r\n      // use set for uniqueness\r\n      return Array.from(new Set(orLeftNames.concat(orRightNames))).map(\r\n        name => graph[name]\r\n      );\r\n    case \"ADDED\":\r\n      const newNames = new Set(Object.keys(bothGraphs.pullRequestGraph));\r\n      for (let name of Object.keys(bothGraphs.baselineGraph)) {\r\n        newNames.delete(name);\r\n      }\r\n      return Array.from(newNames)\r\n        .map(name => graph[name])\r\n        .filter(Boolean);\r\n    case \"REMOVED\":\r\n      const oldNames = new Set(Object.keys(bothGraphs.baselineGraph));\r\n      for (let name of Object.keys(bothGraphs.pullRequestGraph)) {\r\n        console.log(\"remove\", name);\r\n        oldNames.delete(name);\r\n      }\r\n      return Array.from(oldNames)\r\n        .map(name => graph[name])\r\n        .filter(Boolean);\r\n    case \"CHANGED\":\r\n      return Object.keys(graph)\r\n        .filter(\r\n          nodeName =>\r\n            bothGraphs.pullRequestGraph[nodeName] === undefined ||\r\n            bothGraphs.baselineGraph[nodeName] === undefined ||\r\n            bothGraphs.pullRequestGraph[nodeName].size !=\r\n              bothGraphs.baselineGraph[nodeName].size\r\n        )\r\n        .map(key => graph[key]);\r\n    case \"INTERPOLATE\":\r\n      return (() => {\r\n        console.log(\"starting interpolation\");\r\n        console.log(\"running inner query\");\r\n        const queryToInterpolateResults = applyQuery(\r\n          bothGraphs,\r\n          graph,\r\n          query.innerQuery\r\n        );\r\n        const originalNodeNames = new Set(\r\n          queryToInterpolateResults.map(x => x.name)\r\n        );\r\n        console.log(\"getting union of all parents\");\r\n        const unionOfAllParents = new Set<string>();\r\n        const parentsToOriginalNode = new Map<string, Set<string>>();\r\n        for (let node of queryToInterpolateResults) {\r\n          console.log(\"traverse from\", node.name);\r\n          traverseGraph([node], node =>\r\n            node.dependants\r\n              .map(parentNodeName => graph[parentNodeName])\r\n              .filter(\r\n                node =>\r\n                  // do not ascend through other nodes in the starting set\r\n                  !originalNodeNames.has(node.name)\r\n              )\r\n          ).forEach(parent => {\r\n            unionOfAllParents.add(parent.name);\r\n            if (!parentsToOriginalNode.has(parent.name)) {\r\n              parentsToOriginalNode.set(parent.name, new Set());\r\n            }\r\n            parentsToOriginalNode.get(parent.name)!.add(node.name);\r\n          });\r\n        }\r\n        console.log(unionOfAllParents);\r\n\r\n        console.log(\"starting descendants of each node\");\r\n        const result = new Set<string>();\r\n        for (let startingNode of queryToInterpolateResults) {\r\n          console.log(\"traverse from\", startingNode.name);\r\n          const descendantsInUnion = traverseGraph(\r\n            [startingNode],\r\n            currentChildNode =>\r\n              currentChildNode.dependencies\r\n                .filter(childName => unionOfAllParents.has(childName))\r\n                .filter(childName => {\r\n                  const inParentSetsOf = parentsToOriginalNode.get(childName);\r\n                  return (\r\n                    // do not descend through other nodes in the starting set\r\n                    !originalNodeNames.has(childName) &&\r\n                    // If it was not seen in the parent pass, ignore it\r\n                    inParentSetsOf != null &&\r\n                    // Only include it in the graph if it is not a circular dependency.\r\n                    // e.g. its only parent set is the same node it is in the child set of\r\n                    !(\r\n                      inParentSetsOf.size == 1 &&\r\n                      inParentSetsOf.has(startingNode.name)\r\n                    )\r\n                  );\r\n                })\r\n                .map(childNodeName => graph[childNodeName])\r\n          );\r\n          descendantsInUnion.forEach(descendant => result.add(descendant.name));\r\n        }\r\n\r\n        console.log(\"got resulting nodes\", result);\r\n\r\n        return Array.from(result).map(name => graph[name]);\r\n      })();\r\n    case \"NOT\":\r\n      const notQueryInnerResultNames = new Set<string>(\r\n        applyQuery(bothGraphs, graph, query.innerQuery).map(x => x.name)\r\n      );\r\n      return Object.values(graph).filter(\r\n        node => !notQueryInnerResultNames.has(node.name)\r\n      );\r\n  }\r\n};\r\n\r\nexport class QueryExecutor {\r\n  private bundleData: BothBundleStats | undefined;\r\n\r\n  setData(blob: BothBundleStats) {\r\n    this.bundleData = blob;\r\n  }\r\n\r\n  getData(): BothBundleStats {\r\n    if (!this.bundleData) {\r\n      throw Error(\"bundle data fetched before it was initialized\");\r\n    }\r\n    return this.bundleData;\r\n  }\r\n\r\n  filter(query: Query): BothBundleStats {\r\n    if (this.bundleData === undefined) {\r\n      throw new Error(\"query executed before bundle data initialized\");\r\n    }\r\n\r\n    const toGraph = (data: ModuleGraphNodeWithChildren[]) =>\r\n      Object.fromEntries(data.map(x => [x.name, x]));\r\n    const queriedData: BothBundleStats = {\r\n      baselineGraph: toGraph(\r\n        applyQuery(this.bundleData, this.bundleData.baselineGraph, query)\r\n      ),\r\n      pullRequestGraph: toGraph(\r\n        applyQuery(this.bundleData, this.bundleData.pullRequestGraph, query)\r\n      )\r\n    };\r\n    return queriedData;\r\n  }\r\n}\r\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","export class Palette {\r\n  private palette: string[];\r\n  private colorCounter = 0;\r\n  private assignedColors = new Map();\r\n\r\n  constructor(palette: string[]) {\r\n    this.palette = palette;\r\n  }\r\n\r\n  getColorForName(name: string): string {\r\n    if (!this.assignedColors.has(name)) {\r\n      this.assignedColors.set(\r\n        name,\r\n        this.palette[this.colorCounter++ % this.palette.length]\r\n      );\r\n    }\r\n    return this.assignedColors.get(name);\r\n  }\r\n}\r\n","export function getPackageFromFilePath(filePath: string): [string, string] {\r\n  let match: RegExpExecArray | string[] | null;\r\n  // catch namespaced modules.\r\n  if ((match = /\\/node_modules\\/(\\@[^\\/]*\\/[^\\/]*)\\/(.*)$/g.exec(filePath))) {\r\n    return [match[1], match[1] + \"/\" + match[2]];\r\n  }\r\n  if (\r\n    (match = /\\/node_modules\\/([^/]*)\\/(.*)$/g.exec(filePath)) &&\r\n    filePath.indexOf(\"css-loader\") == -1\r\n  ) {\r\n    return [match[1], match[1] + \"/\" + match[2]];\r\n  }\r\n  if ((match = /\\/([^/]*)\\/(lib|src)\\/([^!]*)$/g.exec(filePath))) {\r\n    return [match[1], match[1] + \"/\" + match[2] + \"/\" + match[3]];\r\n  }\r\n  return [filePath, filePath];\r\n}\r\n","export const formatByteSize = (size: number) => {\r\n  if (size === 0) {\r\n    return \"0\";\r\n  }\r\n  const unitIndex = Math.floor(Math.log(size) / Math.log(1024));\r\n  const num = size / Math.pow(1024, unitIndex);\r\n  return (\r\n    (unitIndex === 0 ? num.toString() : num.toFixed(2)) +\r\n    [\"B\", \"kB\", \"MB\", \"GB\", \"TB\"][unitIndex]\r\n  );\r\n};\r\n\r\nexport const formatByteSizeChange = (size: number) =>\r\n  size > 0 ? `+${formatByteSize(size)}` : `-${formatByteSize(Math.abs(size))}`;\r\n\r\nexport const formatCountChange = (size: number) =>\r\n  size > 0 ? `+${size}` : `-${Math.abs(size)}`;\r\n","export const BAD_COLOR = \"rgba(255, 20, 120, 1)\";\r\nexport const GOOD_COLOR = \"rgba(34, 170, 238, 1)\";\r\n","import * as Vis from \"vis\";\r\nimport { Palette } from \"./Palette\";\r\nimport { getPackageFromFilePath } from \"./getPackageFromFilePath\";\r\nimport { default as Color } from \"color\";\r\nimport { BothBundleStats } from \"../reducers/schema\";\r\nimport {\r\n  ModuleGraphNodeWithChildren,\r\n  ModuleGraphWithChildren\r\n} from \"webpack-bundle-diff-add-children\";\r\nimport { formatByteSize, formatByteSizeChange } from \"../utils/formatByteSize\";\r\nimport { GOOD_COLOR, BAD_COLOR } from \"../utils/colors\";\r\n\r\nconst getDependencies = (maybeNode: ModuleGraphNodeWithChildren | undefined) =>\r\n  maybeNode ? maybeNode.dependencies || [] : [];\r\n\r\nconst getNodeId = (\r\n  oldGraphNode: ModuleGraphNodeWithChildren | undefined,\r\n  newGraphNode: ModuleGraphNodeWithChildren | undefined\r\n): string => {\r\n  if (oldGraphNode) {\r\n    return `old-${oldGraphNode.id}`;\r\n  } else if (newGraphNode) {\r\n    return `new-${newGraphNode.id}`;\r\n  } else {\r\n    throw new Error(\"neither new or old graph node was initialized\");\r\n  }\r\n};\r\n\r\n// Uses the NES colour palette by default.\r\nconst palette = new Palette([\r\n  \"#7C7C7C\",\r\n  \"#0000FC\",\r\n  \"#0000BC\",\r\n  \"#4428BC\",\r\n  \"#940084\",\r\n  \"#A80020\",\r\n  \"#A81000\",\r\n  \"#881400\",\r\n  \"#503000\",\r\n  \"#007800\",\r\n  \"#006800\",\r\n  \"#005800\",\r\n  \"#004058\",\r\n  \"#000000\",\r\n  \"#000000\",\r\n  \"#000000\",\r\n  \"#BCBCBC\",\r\n  \"#0078F8\",\r\n  \"#0058F8\",\r\n  \"#6844FC\",\r\n  \"#D800CC\",\r\n  \"#E40058\",\r\n  \"#F83800\",\r\n  \"#E45C10\",\r\n  \"#AC7C00\",\r\n  \"#00B800\",\r\n  \"#00A800\",\r\n  \"#00A844\",\r\n  \"#008888\",\r\n  \"#000000\",\r\n  \"#000000\",\r\n  \"#000000\",\r\n  \"#F8F8F8\",\r\n  \"#3CBCFC\",\r\n  \"#6888FC\",\r\n  \"#9878F8\",\r\n  \"#F878F8\",\r\n  \"#F85898\",\r\n  \"#F87858\",\r\n  \"#FCA044\",\r\n  \"#F8B800\",\r\n  \"#B8F818\",\r\n  \"#58D854\",\r\n  \"#58F898\",\r\n  \"#00E8D8\",\r\n  \"#787878\",\r\n  \"#000000\",\r\n  \"#000000\",\r\n  \"#FCFCFC\",\r\n  \"#A4E4FC\",\r\n  \"#B8B8F8\",\r\n  \"#D8B8F8\",\r\n  \"#F8B8F8\",\r\n  \"#F8A4C0\",\r\n  \"#F0D0B0\",\r\n  \"#FCE0A8\",\r\n  \"#F8D878\",\r\n  \"#D8F878\",\r\n  \"#B8F8B8\",\r\n  \"#B8F8D8\",\r\n  \"#00FCFC\",\r\n  \"#F8D8F8\",\r\n  \"#000000\",\r\n  \"#000000\"\r\n]);\r\n\r\nconst union = <T>(setA: Set<T>, setB: Set<T>): Set<T> => {\r\n  var _union = new Set<T>();\r\n  setA.forEach(elem => {\r\n    _union.add(elem);\r\n  });\r\n  setB.forEach(elem => {\r\n    _union.add(elem);\r\n  });\r\n  return _union;\r\n};\r\n\r\nconst uniq = <T>(a: T[]) => {\r\n  return Array.from(new Set(a));\r\n};\r\n\r\nexport function buildGraphVisualization(\r\n  filteredBundleStats: BothBundleStats,\r\n  fullBundleStats: BothBundleStats\r\n): Vis.Data {\r\n  const allNodeNames = uniq(\r\n    Object.keys(filteredBundleStats.baselineGraph).concat(\r\n      Object.keys(filteredBundleStats.pullRequestGraph)\r\n    )\r\n  );\r\n\r\n  const nodes: Vis.Node[] = [];\r\n  const edges: Vis.Edge[] = [];\r\n\r\n  for (let nodeName of allNodeNames) {\r\n    const oldGraphNode = filteredBundleStats.baselineGraph[nodeName];\r\n    const newGraphNode = filteredBundleStats.pullRequestGraph[nodeName];\r\n    const nodeId = getNodeId(oldGraphNode, newGraphNode);\r\n\r\n    const isRemoved: boolean = !!(oldGraphNode && !newGraphNode);\r\n    const isNewlyAdded: boolean = !!(!oldGraphNode && newGraphNode);\r\n\r\n    let labelStub: string = \"\";\r\n    const [packageName, inPackagePath] = getPackageFromFilePath(nodeName);\r\n    let nodeColor: string = palette.getColorForName(packageName);\r\n    const isLight: boolean = new Color(nodeColor).hsl().object().l > 50;\r\n    let borderColor = isLight ? \"#000\" : nodeColor;\r\n    if (isNewlyAdded) {\r\n      labelStub = \"NEW\";\r\n      borderColor = BAD_COLOR;\r\n    } else if (isRemoved) {\r\n      labelStub = \"REMOVED\";\r\n      borderColor = GOOD_COLOR;\r\n    }\r\n\r\n    const wasHoisted = (\r\n      node: ModuleGraphNodeWithChildren | undefined,\r\n      graph: ModuleGraphWithChildren\r\n    ) =>\r\n      node &&\r\n      node.parents.length === 1 &&\r\n      graph[node.parents[0]].containsHoistedModules === true;\r\n\r\n    if (\r\n      wasHoisted(oldGraphNode, fullBundleStats.baselineGraph) ||\r\n      wasHoisted(newGraphNode, fullBundleStats.pullRequestGraph)\r\n    ) {\r\n      labelStub = \"*HOISTED*\" + (labelStub.length ? \" \" : \"\") + labelStub;\r\n    }\r\n\r\n    const isRootNode = (oldGraphNode || newGraphNode).parents.length == 0;\r\n    if (isRootNode) {\r\n      labelStub += \" ROOT\";\r\n    }\r\n\r\n    const nodeSize: string = !!(oldGraphNode && newGraphNode)\r\n      ? `${formatByteSize(newGraphNode.size)}${\r\n          newGraphNode.size === oldGraphNode.size\r\n            ? \"\"\r\n            : \", \" + formatByteSizeChange(newGraphNode.size - oldGraphNode.size)\r\n        }`\r\n      : oldGraphNode\r\n      ? `${formatByteSize(oldGraphNode.size)}`\r\n      : `${formatByteSize(newGraphNode.size)}`;\r\n\r\n    const addedOrRemoved = isNewlyAdded || isRemoved;\r\n\r\n    const node = {\r\n      id: nodeId,\r\n      label: labelStub\r\n        ? `${labelStub} ${inPackagePath} (${nodeSize})`\r\n        : `${inPackagePath} (${nodeSize})`,\r\n      title: \"<div>AAAHHHH</div>\",\r\n      color: {\r\n        background: nodeColor,\r\n        border: borderColor,\r\n        highlight: {\r\n          background: nodeColor,\r\n          border: borderColor\r\n        }\r\n      },\r\n      scaling: {\r\n        max: 1000\r\n      },\r\n      font: {\r\n        size: addedOrRemoved || isRootNode ? 18 : 14\r\n      },\r\n      margin: {\r\n        top: 10,\r\n        bottom: 10,\r\n        left: 10,\r\n        right: 10\r\n      },\r\n      borderWidth: addedOrRemoved || isRootNode ? 2 : 1\r\n    };\r\n\r\n    if (isRootNode) {\r\n      (node as any).shape = \"diamond\";\r\n    } else {\r\n      (node as any).font.color = isLight ? \"#000\" : \"#FFF\";\r\n    }\r\n\r\n    nodes.push(node);\r\n\r\n    const oldDependencies: Set<string> = new Set(getDependencies(oldGraphNode));\r\n    const newDependencies: Set<string> = new Set(getDependencies(newGraphNode));\r\n\r\n    const allDependencies: Set<string> = union(\r\n      oldDependencies,\r\n      newDependencies\r\n    );\r\n\r\n    allDependencies.forEach(dependencyName => {\r\n      const oldDependencyNode =\r\n        filteredBundleStats.baselineGraph[dependencyName];\r\n      const newDependencyNode =\r\n        filteredBundleStats.pullRequestGraph[dependencyName];\r\n      if (!newDependencyNode && !oldDependencyNode) {\r\n        return;\r\n      }\r\n      const dependencyId = getNodeId(oldDependencyNode, newDependencyNode);\r\n      const inNew = newDependencies.has(dependencyName);\r\n      const inOld = oldDependencies.has(dependencyName);\r\n\r\n      edges.push({\r\n        from: nodeId,\r\n        to: dependencyId,\r\n        color: inNew && inOld ? \"#000\" : inNew ? BAD_COLOR : GOOD_COLOR\r\n      });\r\n    });\r\n  }\r\n\r\n  return { nodes, edges };\r\n}\r\n","import {\r\n  BothBundleStats,\r\n  BundleSizeSummary,\r\n  SizeSummary\r\n} from \"../reducers/schema\";\r\nimport { getPackageFromFilePath } from \"./getPackageFromFilePath\";\r\n\r\nconst uniq = <T>(a: T[]) => {\r\n  return Array.from(new Set(a));\r\n};\r\n\r\nexport const getBundleSizeSummary = (\r\n  resultGraph: BothBundleStats\r\n): BundleSizeSummary => {\r\n  const packages: { [key: string]: SizeSummary } = {};\r\n\r\n  const allNodeNames = uniq(\r\n    Object.keys(resultGraph.baselineGraph).concat(\r\n      Object.keys(resultGraph.pullRequestGraph)\r\n    )\r\n  );\r\n\r\n  const ensurePackage = (name: string) => {\r\n    const [packageName] = getPackageFromFilePath(name);\r\n    if (packages[packageName] === undefined) {\r\n      packages[packageName] = {\r\n        numFilesAfter: 0,\r\n        numFilesDelta: 0,\r\n        totalBytesAfter: 0,\r\n        totalBytesDelta: 0\r\n      };\r\n    }\r\n    return packages[packageName];\r\n  };\r\n\r\n  for (let name of allNodeNames) {\r\n    const oldGraphNode = resultGraph.baselineGraph[name];\r\n    const newGraphNode = resultGraph.pullRequestGraph[name];\r\n    const currentPackage = ensurePackage(name);\r\n    if (oldGraphNode === undefined) {\r\n      currentPackage.numFilesDelta += 1;\r\n      currentPackage.totalBytesDelta += newGraphNode.size;\r\n      currentPackage.totalBytesAfter += newGraphNode.size;\r\n    } else if (newGraphNode === undefined) {\r\n      currentPackage.numFilesDelta -= 1;\r\n      currentPackage.numFilesAfter += 1;\r\n      currentPackage.totalBytesDelta -= oldGraphNode.size;\r\n    } else {\r\n      currentPackage.numFilesAfter += 1;\r\n      currentPackage.totalBytesDelta += newGraphNode.size - oldGraphNode.size;\r\n      currentPackage.totalBytesAfter += newGraphNode.size;\r\n    }\r\n  }\r\n\r\n  const total: SizeSummary = {\r\n    numFilesAfter: 0,\r\n    numFilesDelta: 0,\r\n    totalBytesAfter: 0,\r\n    totalBytesDelta: 0\r\n  };\r\n\r\n  for (let packageName in packages) {\r\n    const currentPackage = packages[packageName];\r\n    total.numFilesAfter += currentPackage.numFilesAfter;\r\n    total.numFilesDelta += currentPackage.numFilesDelta;\r\n    total.totalBytesAfter += currentPackage.totalBytesAfter;\r\n    total.totalBytesDelta += currentPackage.totalBytesDelta;\r\n  }\r\n\r\n  return { packages, total };\r\n};\r\n","var isSameBundle = function isSameBundle(parent, child) {\n  var children = new Set(child.namedChunkGroups);\n  return parent.namedChunkGroups.every(function (name) {\n    return children.has(name);\n  });\n};\n\nvar idCounter = 1;\n/**\r\n * Builds a copy of a module graph tracking child information & with a unique ID associated\r\n * with each node in the graph.\r\n *\r\n * @param graph\r\n */\n\nfunction getModuleGraphWithChildren(graph) {\n  var newGraph = {};\n\n  var ensureNodeInNewGraph = function ensureNodeInNewGraph(moduleName) {\n    var mod = newGraph[moduleName];\n\n    if (mod === undefined) {\n      if (!graph[moduleName]) {\n        return null;\n      } // copy the module from the original graph\n\n\n      mod = JSON.parse(JSON.stringify(graph[moduleName]));\n      mod.id = idCounter++;\n      mod.children = [];\n      mod.dependants = [];\n      mod.dependencies = []; // add the new module to the new graph\n\n      newGraph[moduleName] = mod;\n    }\n\n    return mod;\n  }; // Operate over sorted keys to ensure that the iteration order is consitent between runs.\n  // This is to make sure the snapshot tests are sane.\n\n\n  var moduleNames = Array.from(Object.keys(graph));\n  moduleNames.sort();\n\n  var _loop = function _loop() {\n    var moduleName = _moduleNames[_i];\n    var mod = ensureNodeInNewGraph(moduleName);\n\n    if (mod === null) {\n      return \"continue\";\n    }\n\n    var parentNames = mod.parents;\n    parentNames.sort();\n    parentNames.forEach(function (parentModuleName) {\n      var parentModule = ensureNodeInNewGraph(parentModuleName);\n\n      if (parentModule === null) {\n        return;\n      }\n\n      parentModule.children.push(moduleName);\n\n      if (isSameBundle(parentModule, mod)) {\n        parentModule.dependencies.push(moduleName);\n        mod.dependants.push(parentModuleName);\n      }\n    });\n  };\n\n  for (var _i = 0, _moduleNames = moduleNames; _i < _moduleNames.length; _i++) {\n    var _ret = _loop();\n\n    if (_ret === \"continue\") continue;\n  }\n\n  return newGraph;\n}\n\nexport { getModuleGraphWithChildren };","import {\r\n  AppToWorkerMessage,\r\n  InitStoreResponseMessage,\r\n  PerformQueryResponseMessage,\r\n  PerformQueryRequestMessage,\r\n  PerformQueryResponseErrorMessage,\r\n  InitStoreResponseErrorMessage\r\n} from \"./worker/messages\";\r\nimport { QueryExecutor } from \"./worker/QueryExecutor\";\r\nimport { buildGraphVisualization } from \"./worker/buildGraphVisualization\";\r\nimport { Query } from \"./utils/Query\";\r\nimport { getBundleSizeSummary } from \"./worker/getBundleSizeSummary\";\r\nimport { BothBundleStats } from \"./reducers/schema\";\r\nimport { getModuleGraphWithChildren } from \"webpack-bundle-diff-add-children\";\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nconst ctx: Worker = self as any;\r\n\r\nconst queryExecutor: QueryExecutor = new QueryExecutor();\r\n\r\nlet pendingInitialQuery: Query | null = null;\r\nlet isInitialized: boolean = false;\r\n\r\nconst performQuery = (query: Query) => {\r\n  try {\r\n    const resultGraph = queryExecutor.filter(query);\r\n    const resultVisualizationData = buildGraphVisualization(\r\n      resultGraph,\r\n      queryExecutor.getData()\r\n    );\r\n    const response: PerformQueryResponseMessage = {\r\n      type: \"QUERY_RESULT\",\r\n      forQuery: query,\r\n      result: resultVisualizationData,\r\n      summary: getBundleSizeSummary(resultGraph)\r\n    };\r\n    return response;\r\n  } catch (e) {\r\n    console.error(e.stack);\r\n    const response: PerformQueryResponseErrorMessage = {\r\n      type: \"QUERY_ERROR\",\r\n      forQuery: query,\r\n      errorMessage: e.toString()\r\n    };\r\n    return response;\r\n  }\r\n};\r\n\r\nctx.onmessage = function(e: MessageEvent): void {\r\n  const messageData = e.data as AppToWorkerMessage;\r\n  console.log(\"Worker: Message received from app script\", messageData);\r\n  switch (messageData.type) {\r\n    case \"INIT_STORE_FROM_BUNDLE_STATS_STRINGS\":\r\n      try {\r\n        const stats: BothBundleStats = {\r\n          baselineGraph: getModuleGraphWithChildren(\r\n            JSON.parse(messageData.baselineString).bundleData.graph\r\n          ),\r\n          pullRequestGraph: getModuleGraphWithChildren(\r\n            JSON.parse(messageData.prString).bundleData.graph\r\n          )\r\n        };\r\n\r\n        queryExecutor.setData(stats);\r\n        isInitialized = true;\r\n        const message: InitStoreResponseMessage = {\r\n          type: \"STORE_LOADED\"\r\n        };\r\n        ctx.postMessage(message);\r\n      } catch (e) {\r\n        const message: InitStoreResponseErrorMessage = {\r\n          type: \"STORE_LOAD_ERROR\",\r\n          errorMessage: e.toString()\r\n        };\r\n        ctx.postMessage(message);\r\n        console.error(e);\r\n      }\r\n      break;\r\n    case \"INIT_STORE_FROM_URL\":\r\n      fetch(messageData.payloadUrl)\r\n        .then(r => r.json())\r\n        .then(response => {\r\n          console.log(\"got data\", response);\r\n          queryExecutor.setData(response);\r\n          isInitialized = true;\r\n          const message: InitStoreResponseMessage = {\r\n            type: \"STORE_LOADED\"\r\n          };\r\n          ctx.postMessage(message);\r\n\r\n          // Run query if we have a pending one\r\n          if (pendingInitialQuery !== null) {\r\n            ctx.postMessage(performQuery(pendingInitialQuery));\r\n          }\r\n        })\r\n        .catch(e => {\r\n          const message: InitStoreResponseErrorMessage = {\r\n            type: \"STORE_LOAD_ERROR\",\r\n            errorMessage: e.toString()\r\n          };\r\n          ctx.postMessage(message);\r\n          console.error(e);\r\n        });\r\n      break;\r\n    case \"QUERY_REQUEST\":\r\n      if (!isInitialized) {\r\n        pendingInitialQuery = messageData.query;\r\n      } else {\r\n        ctx.postMessage(performQuery(messageData.query));\r\n      }\r\n      break;\r\n  }\r\n};\r\n\r\nexport default {} as any;\r\n"],"sourceRoot":""}